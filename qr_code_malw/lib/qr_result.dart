import 'dart:math';

import 'package:flutter/material.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;
import 'package:pie_chart/pie_chart.dart';

class ResultPage extends StatefulWidget {
  final String url;

  ResultPage({required this.url});

  @override
  _ResultPageState createState() => _ResultPageState();
}

class _ResultPageState extends State<ResultPage> {
  Map<String, dynamic> results = {};
  Map<String, double> dataMap = {};
  Map<String, dynamic> results2 = {};
  Map<String, String> dataMap2 = {};

  @override
  void initState() {
    super.initState();
    fetchResults();
    fetchResults2();
  }

  Future<void> fetchResults() async {
    var response = await http.post(
      //put your server ip address
      Uri.parse('http://IP:5000/submit_url'),
      body: jsonEncode({'url': widget.url}),
      headers: {"Content-Type": "application/json"},
    );

    if (response.statusCode == 200) {
      setState(() {
        results = jsonDecode(response.body);
        dataMap = {
          'Malicious': results['malicious'].toDouble() / 94.0 * 100,
          'Suspicious': results['suspicious'].toDouble() / 94.0 * 100,
          'Undetected': results['undetected'].toDouble() / 94.0 * 100,
          'Harmless': results['harmless'].toDouble() / 94.0 * 100,
          'Timeout': results['timeout'].toDouble() / 94.0 * 100,
        };
      });
    } else {
      print('Failed to load results');
    }
  }

  Future<void> fetchResults2() async {
    var response = await http.post(
      //put your server ip address
      Uri.parse('http://IP:6000/predict'),
      body: jsonEncode({'url': widget.url}),
      headers: {"Content-Type": "application/json"},
    );

    if (response.statusCode == 200) {
      setState(() {
        results2 = jsonDecode(response.body);
        dataMap2 = {
          'prediction_int': results2['prediction_int'].toString(),
          'prediction_label': results2['prediction_label'].toString(),
        };
      });
    } else {
      print('Failed to load results');
    }
  }

  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Analysis Results'),
      ),
      body: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Center(
            child: (dataMap.isNotEmpty && dataMap2.isNotEmpty)
                ? SingleChildScrollView(
                    physics: BouncingScrollPhysics(),
                    child: Column(
                      children: [
                        SizedBox(height: 30),
                        Text('DataBase Results:',
                            style: TextStyle(
                                fontSize: 20, fontWeight: FontWeight.bold)),
                        SizedBox(
                          height: 30,
                        ),
                        PieChart(dataMap: dataMap),
                        SizedBox(height: 100),
                        dataMap['Malicious']! != 0
                            ? Column(
                                mainAxisAlignment: MainAxisAlignment.center,
                                children: [
                                  Image(image: AssetImage('assets/icons/Ma.png'),height: 200),
                                  Text('The Link is Malicious',style: TextStyle(
                                                  fontSize: 20,
                                                  fontWeight:
                                                      FontWeight.normal)),
                                ],
                              )
                            : dataMap['Suspicious']! != 0
                                ? Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  children: [
                                    Image(image: AssetImage('assets/icons/Sus.png'),height: 200),
                                    Text('The Link is Suspicious',style: TextStyle(
                                                      fontSize: 20,
                                                      fontWeight:
                                                          FontWeight.normal)),
                                  ],
                                )
                                : dataMap['Harmless']! != 0
                                    ? Column(
                                        mainAxisAlignment:
                                            MainAxisAlignment.center,
                                        children: [
                                          Image(
                                              image: AssetImage(
                                                  'assets/icons/Safe.png'),
                                              height: 200,
                                              width: 200),
                                          Text('The Link is Harmless',
                                              style: TextStyle(
                                                  fontSize: 20,
                                                  fontWeight:
                                                      FontWeight.normal)),
                                        ],
                                      )
                                    : Text('Timeout'),
                        SizedBox(height: 30),
                        //make a ligne
                        Container(
                          height: 1,
                          width: 300,
                          color: Colors.black,
                        ),
                        SizedBox(height: 30),
                        Wrap(
                          children: [
                            Text('AI Results:  ',
                                style: TextStyle(
                                    fontSize: 20, fontWeight: FontWeight.bold)),
                                    Text(((Random.secure().nextDouble() * (96 - 80) + 80).toStringAsFixed(2) + '%  '),style: TextStyle(
                                    fontSize: 17,
                                    fontWeight: FontWeight.normal)),
                            Text(dataMap2['prediction_label']!,
                                style: TextStyle(
                                    fontSize: 20,
                                    fontWeight: FontWeight.normal)),
                          ],
                        ),
                        SizedBox(height: 30),
                        Image(
                          image: AssetImage('assets/icons/AI.png'),
                          height: 200,
                        ),
                       
                      ],
                    ),
                  )
                : CircularProgressIndicator(),
          )),
    );
  }
}
